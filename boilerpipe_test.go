package boilerpipe

import (
	"encoding/base64"
	"fmt"
	"log"
	"net/http"
	"net/url"
)

func ExampleArticlePipeline() {
	rawurl := "https://blog.openshift.com/day-18-boilerpipe-article-extraction-for-java-developers/"

	u, err := url.Parse(rawurl)
	if err != nil {
		log.Fatal(err)
	}

	resp, err := http.Get(rawurl)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	// Must provide an io.Reader (e.g. http.Response.Body) and an option *url.URL
	// which helps to extract a date for the article.
	doc, err := NewDocument(resp.Body, u)
	if err != nil {
		log.Fatal(err)
	}

	NewArticlePipeline().Process(doc)

	fmt.Println(doc.Title)
	fmt.Println(doc.Date.Format("January 2, 2006"))
	fmt.Println(doc.URL)
	fmt.Print(base64.StdEncoding.EncodeToString([]byte(doc.Content())))

	// Output:
	// Day 18: Boilerpipe--Article Extraction for Java Developers â€“ OpenShift Blog
	// November 15, 2013
	// https://blog.openshift.com/day-18-boilerpipe-article-extraction-for-java-developers
	// 
}
