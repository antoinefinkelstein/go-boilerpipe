{"document":"","results":{"content":"Day 18: Boilerpipe–Article Extraction for Java Developers\nNovember 15, 2013\nBy Shekhar Gulati\nToday for my 30 day challenge , I wanted to learn how to do text and image extraction from web links using the Java programming language. This is a common requirement in most of the content discovery websites like Prismatic . In this blog, I will show you how to use a Java library called boilerpipe to accomplish this task.\nPrerequisite\nBasic Java knowledge is required. Install the latest Java Development Kit (JDK) on your operating system. You can either install OpenJDK 7 or Oracle JDK 7 . OpenShift supports both OpenJDK 6 and 7.\nSign up for an OpenShift Account .Today for my 30 day challenge , I decided to learn how to do text and image extraction from web links using the Java programming language. This is a very common requirement in most of the content discovery websites like Prismatic . In this blog, we will learn how we can use a Java library called boilerpipe to accomplish this task.\nPrerequisite\nBasic Java knowledge is required. Install the latest Java Development Kit (JDK) on your operating system. You can either install OpenJDK 7 or Oracle JDK 7 . OpenShift supports both OpenJDK 6 and 7.\nSign up for an OpenShift Account . It is completely free and Red Hat gives every user three free Gears on which to run your applications. At the time of this writing, the combined resources allocated for each user is 1.5 GB of memory and 3 GB of disk space.\nInstall the rhc client tool on your machine. RHC is a ruby gem so you need to have ruby 1.8.7 or above on your machine. To install rhc, just typesudo gem install rhc If you already have one, make sure it is the latest one. To update your rhc, execute the command sudo gem update rhc For additional assistance setting up the rhc command-line tool, see the following page: https://www.openshift.com/developers/rhc-client-tools-install\nSetup your OpenShift account using the rhc setup command. This command will help you create a namespace and upload your ssh keys to OpenShift server.\nStep1 : Create a JBoss EAP application\nLet’s start creating the demo application. The name of the application is newsapp.\n$ rhc create-app newsapp jbosseap\nIf you have access to medium gears then you can use following command.\n$ rhc create-app newsapp jbosseap -g medium\nThis will create an application container for us, called a gear, and setup all of the required SELinux policies and cgroup configuration. OpenShift will also setup a private git repository for us and clone the repository to the local system. Finally, OpenShift will propagate the DNS to the outside world. The application will be accessible at http://newsapp-{domain-name}.rhcloud.com/. Replace {domain-name} with your own unique OpenShift domain name (also sometimes called a namespace).\nStep 2 : Add Maven dependencies\nIn the pom.xml file add the following dependency:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;de.l3s.boilerpipe\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;boilerpipe\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;xerces\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;xercesImpl\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.9.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;net.sourceforge.nekohtml\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;nekohtml\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.9.13\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;\nYou will also need to add a new repository\n\u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;boilerpipe-m2-repo\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;http://boilerpipe.googlecode.com/svn/repo/\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;false\u0026lt;/enabled\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt;\nAlso update the maven project to Java 7 by updating a couple of properties in the pom.xml file:\n\u0026lt;maven.compiler.source\u0026gt;1.7\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;1.7\u0026lt;/maven.compiler.target\u0026gt;\nNow update the Maven project Right click \u0026gt; Maven \u0026gt; Update Project.\nStep 3 : Enable CDI\nWe are using CDI for dependency injection. CDI or Context and Dependency injection is a Java EE 6 specification which enables dependency injection in a Java EE 6 project. CDI defines type-safe dependency injection mechanism for Java EE. Almost any POJO can be injected as a CDI bean.\nCreate a new xml file named beans.xml in the src/main/webapp/WEB-INF folder. Replace the content of beans.xml with the following:\n\u0026lt;beans xmlns=\u0026#34;http://java.sun.com/xml/ns/javaee\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd\u0026#34;\u0026gt; \u0026lt;/beans\u0026gt;\nStep 4 : Create BoilerpipeContentExtractionService\nNow we can create an BoilerpipeContentExtractionService service class which will take a url and find the title and article text from it.\nimport java.net.URL; import java.util.Collections; import java.util.List; import com.newsapp.boilerpipe.image.Image; import com.newsapp.boilerpipe.image.ImageExtractor; import de.l3s.boilerpipe.BoilerpipeExtractor; import de.l3s.boilerpipe.document.TextDocument; import de.l3s.boilerpipe.extractors.ArticleExtractor; import de.l3s.boilerpipe.extractors.CommonExtractors; import de.l3s.boilerpipe.sax.BoilerpipeSAXInput; import de.l3s.boilerpipe.sax.HTMLDocument; import de.l3s.boilerpipe.sax.HTMLFetcher; public class BoilerpipeContentExtractionService { public Content content(String url) { try { final HTMLDocument htmlDoc = HTMLFetcher.fetch(new URL(url)); final TextDocument doc = new BoilerpipeSAXInput(htmlDoc.toInputSource()).getTextDocument(); String title = doc.getTitle(); String content = ArticleExtractor.INSTANCE.getText(doc); final BoilerpipeExtractor extractor = CommonExtractors.KEEP_EVERYTHING_EXTRACTOR; final ImageExtractor ie = ImageExtractor.INSTANCE; List\u0026lt;Image\u0026gt; images = ie.process(new URL(url), extractor); Collections.sort(images); String image = null; if (!images.isEmpty()) { image = images.get(0).getSrc(); } return new Content(title, content.substring(0, 200), image); } catch (Exception e) { return null; } } }\nThe code above:\nFirst fetches the document at the given url.\nParses the HTML document and return TextDocument.\nGets the title from the text document.\nExtracts content from the text and returns a new instance of the application value object.\nStep 5 : Enable JAX-RS\nTo enable JAX-RS, create a class which extends javax.ws.rs.core.Application and specify the application path using the javax.ws.rs.ApplicationPath annotation as shown below.\nimport javax.ws.rs.ApplicationPath; import javax.ws.rs.core.Application; @ApplicationPath(\u0026#34;/api/v1\u0026#34;) public class JaxrsInitializer extends Application{ }\nStep 6 : Create ContentExtractionResource\nNow we will create our ContentExtractionResource class which will return a content object as JSON. Create a new class named ContentExtractionResource and replace the code with the contents shown below:\nimport javax.inject.Inject; import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.Produces; import javax.ws.rs.QueryParam; import javax.ws.rs.core.MediaType; import com.newsapp.service.BoilerpipeContentExtractionService; import com.newsapp.service.Content; @Path(\u0026#34;/content\u0026#34;) public class ContentExtractionResource { @Inject private BoilerpipeContentExtractionService boilerpipeContentExtractionService; @GET @Produces(value = MediaType.APPLICATION_JSON) public Content extractContent(@QueryParam(\u0026#34;url\u0026#34;) String url) { return boilerpipeContentExtractionService.content(url); } }\nDeploy to OpenShift\nFinally, deploy the changes to OpenShift\n$ git add . $ git commit -am \u0026#34;NewApp\u0026#34; $ git push\nAfter the code is pushed and the war is successfully deployed, we can view the application running at http://newsapp-{domain-name}.rhcloud.com. My sample application is running at http://newsapp-t20.rhcloud.com .\nNow you can test by submitting a link in the application ui.\nThat’s it for today. Keep giving feedback.\nNext Steps","date":"2013-11-15T00:00:00Z","title":"Day 18: Boilerpipe--Article Extraction for Java Developers – OpenShift Blog","url":"https://blog.openshift.com/day-18-boilerpipe-article-extraction-for-java-developers"},"url":"https://blog.openshift.com/day-18-boilerpipe-article-extraction-for-java-developers"}
